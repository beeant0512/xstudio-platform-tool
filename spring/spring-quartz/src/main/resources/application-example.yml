spring:
  quartz:
    group: 'default'
    instanceName: quartzScheduler
    # 相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            # 调度器实例名称
            instanceName: quartzScheduler
            # 调度器实例编号自动生成
            instanceId: AUTO
          jobStore:
            # 持久化方式配置
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            # 持久化方式配置数据驱动，MySQL数据库
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # quartz相关数据表前缀名
            tablePrefix: QRTZ_
            # 开启分布式部署
            isClustered: true
            # 分布式节点有效性检查时间间隔，单位：毫秒
            clusterCheckinInterval: 20000
            # 配置是否使用
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            # 执行最大并发线程数量
            threadCount: 10
            # 线程优先级
            threadPriority: 5
            # 配置是否启动自动加载数据库内的定时任务，默认true
            threadsInheritContextClassLoaderOfInitializingThread: true
    # 数据库方式
    job-store-type: jdbc
      # 初始化表结构
      #jdbc:
    #initialize-schema: never
  session:
    store-type: none
  datasource:
    druid:
      quartz:
        url: jdbc:mysql://10.64.10.209:3306/test?useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC&allowMultiQueries=true&autoReconnect=true
        username: root
        password: "123"
        maxConnections: 5
        validationQuery: select 0
        db-type: mysql
        # 初始化时建立物理连接的个数
        initial-size: 5
        # 最小连接池数量
        min-idle: 5
        # 最大连接池数量 maxIdle已经不再使用
        max-active: 20
        # 获取连接时最大等待时间，单位毫秒
        max-wait: 60000
        # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        # 既作为检测的间隔时间又作为testWhileIdel执行的依据
        time-between-eviction-runs-millis: 60000
        # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 30000
        # 用来检测连接是否有效的sql 必须是一个查询语句
        # mysql中为 select 'x'
        # oracle中为 select 1 from dual
        validation-query: select 'x'
        # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        # 当数据库抛出不可恢复的异常时,抛弃该连接
        # exception-sorter: true
        # 是否缓存preparedStatement,mysql5.5+建议开启
        pool-prepared-statements: true
        # 当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
        # 配置扩展插件
        filters: stat,wall
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
        # 合并多个DruidDataSource的监控数据
        use-global-data-source-stat: true
        # 设置访问druid监控页的账号和密码,默认没有
        stat-view-servlet:
          login-username: admin
          login-password: adminxxxxxxx
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.alibaba.druid.pool.DruidDataSource
mybatis:
  mapper-locations: classpath:/mybatis/**/**.xml
  type-aliases-package: com.xstudio.model
  configuration:
    map-underscore-to-camel-case: true
    default-fetch-size: 100
    default-statement-timeout: 30
  executor-type: batch

logging:
  level:
    root: debug